scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
peaks <-
data.frame(
start = c(8537060L, 8852419L, 8923901L),
end = c(8537559L, 8852918L, 8924400L)
)
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_gene_arrow(data = arrow, inherit.aes = F, aes(xmin = start, xmax = end, y = 40, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 40, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 250, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 200, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
arrow <- data.frame(
stringsAsFactors = FALSE,
start = c(8923901L),
end = c(8924400L),
SampleID = c("CV0857")
)
arrow
peaks <-
data.frame(
start = c(8537060L, 8852419L, 8923901L),
end = c(8537559L, 8852918L, 8924400L)
)
arrow <- data.frame(
stringsAsFactors = FALSE,
start = c(8923901L),
end = c(8924400L),
SampleID = c("CV0857") # We want SampleID here so we plot this on the top-most sample
)
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
arrow <- data.frame(
stringsAsFactors = FALSE,
start = c(8924000L),
end = c(8924400L),
SampleID = c("CV0857") # We want SampleID here so we plot this on the top-most sample
)
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
arrow <- data.frame(
stringsAsFactors = FALSE,
start = c(8924000L),
end = c(8924410L),
SampleID = c("CV0857") # We want SampleID here so we plot this on the top-most sample
)
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
View(sample.meta)
data.frame(
pos = sample(8923901:8924400, 30, replace = TRUE),
TF = sample(LETTERS, 30, replace = TRUE),
SampleID = sample(sample.meta$SampleID, 30, replace = TRUE)
)
# Random transcription factor binding sites (TFBSs)
TFBSs <- data.frame(
pos = sample(8923901:8924400, 30, replace = TRUE),
TF = sample(LETTERS, 30, replace = TRUE),
SampleID = sample(sample.meta$SampleID, 30, replace = TRUE)
)
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_point(data = TFBSs, aes(x = pos, y = 100, color = TF)) _
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_point(data = TFBSs, aes(x = pos, y = 100, color = TF)) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
LETTERS
# Random transcription factor binding sites (TFBSs)
TFBSs <- data.frame(
pos = sample(8923901:8924400, 30, replace = TRUE),
TF = sample(LETTERS[1:8], 30, replace = TRUE),
SampleID = sample(sample.meta$SampleID, 30, replace = TRUE)
)
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_point(data = TFBSs, aes(x = pos, y = 100, color = TF)) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_point(data = TFBSs, aes(x = pos, y = 100, color = TF)) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL),
color = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_point(data = TFBSs, aes(x = pos, y = 100, color = TF)) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL),
color = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
scale_color_manual(values = brewer.pal(8, "Dark2")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
library(RColorBrewer)
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_point(data = TFBSs, aes(x = pos, y = 100, color = TF)) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL),
color = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
scale_color_manual(values = brewer.pal(8, "Dark2")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_point(data = TFBSs, aes(x = pos, y = 100, color = TF)) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL),
color = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
scale_color_manual(values = brewer.pal(8, "Dark2")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
# Random transcription factor binding sites (TFBSs)
TFBSs <- data.frame(
pos = sample(8923901:8924400, 30, replace = TRUE),
TF = sample(LETTERS[1:5], 30, replace = TRUE),
SampleID = sample(sample.meta$SampleID, 30, replace = TRUE)
)
ggplot() +
theme_minimal() +
geom_col(data = track.df, aes(x = start, y = score, fill = Species)) +
annotate(geom = "rect",
xmin = peaks$start,
xmax = peaks$end,
ymin = -Inf,
ymax = +Inf,
alpha = 0.2) +
geom_point(data = TFBSs, aes(x = pos, y = 100, color = TF)) +
geom_gene_arrow(data = arrow, aes(xmin = start, xmax = end, y = 180, fill="blue"), arrowhead_height = grid::unit(2, "mm"), arrow_body_height = grid::unit(1, "mm")) +
facet_wrap(~factor(SampleID, levels = sample.meta$SampleID), ncol = 1, strip.position = "right") + # can use scales = "free_y" if you want to have each track to have independently determined y axes
scale_x_continuous(limits = c(start_pos,end_pos), expand = c(0,0), labels = label_number(scale = 1e-6), breaks = pretty_breaks(n=3)) +
scale_y_continuous(breaks = pretty_breaks(n=2)) +
theme(legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
plot.margin = margin(10,5,5,5),
) +
guides(fill = guide_legend(nrow = 1, title = NULL),
color = guide_legend(nrow = 1, title = NULL)) +
scale_fill_manual(values = c("viridis" = "#2E8B58",
"concolor" = "#D9A528",
"cerberus" = "black"),
labels = c(expression(italic("C. viridis")),
expression(italic("C. o. concolor")),
expression(italic("C. o. cerberus"))),
breaks = c("viridis", "concolor", "cerberus")) +
scale_color_manual(values = brewer.pal(5, "Dark2")) +
labs(x = paste0("pos. on ", chrom, ' (Mb)'), y = "ATAC-seq read density") +
ggtitle("Regulatory region")
?LoadTrackFIle
?LoadTrackFile
